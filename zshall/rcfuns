# -*- Mode: shell-script; indent-tabs-mode: nil; sh-shell: zsh; -*-

if [ -d ~/.zshall/functions/Misc ]
then
    fpath=( $HOME/.zshall/functions/Misc $fpath)
fi
if [ -d ~/.zshall/functions/Prompts ]
then
    fpath=( $HOME/.zshall/functions/Prompts $fpath )
fi

# My Custom Functions	     #

# set c dir
function chome () {
    my_homes=(`\ls -N ~/..`)
    read -s -t 5 -p "`\ls -Nm ~/..`
	dir: " MYHINDX
    export MYHOME=${my_homes[$MYHINDX]}
    unset my_homes MYHINDX
}

if [ $HOME:t = "hell" ]
then
    foreach subdir ( ~/../* ) {
        if [ -r $subdir -a -d $subdir ]
	      then
            vsubdir=$(basename $subdir | tr '[[:upper:]]' '[[:lower:]]' | tr -d '+')
            eval $vsubdir=$subdir;
            eval : ~"$vsubdir"
        fi
    }
fi

if [ -d ~/SCRATCH ]
then
    scratch=~/SCRATCH
elif [ -d ~/SCRATCHES/main ]
then
    scratch=~/SCRATCHES/main
elif [ -d ~/SCRATCHES/small ]
then
    scratch=~/SCRATCHES/small
fi


if [ $scratch ]
then
    if [ -d ~/SCRATCH/shortlive/ ]
	  then
        short=~/SCRATCH/shortlive ; : ~short
    fi
    if [ -d ~/SCRATCH/internet/download/ ]
	  then
        download=~/SCRATCH/internet/download/ ; : ~download
    fi
    : ~scratch
fi


if [ -d ~/Documents/ ]
then
    doc=~/Documents ; : ~doc
    if [ -d ~/Documents/pdfs/ ]
	  then
        pdfs=~/pdfs ; : ~pdfs
    fi
fi


# 	function c () {
# 	    if [ $# -eq 1 ]; then
# 		cd $@ && ls -A -F
# 	    else
# 		cd $MYHOME &&  ls -A -F
# 	    fi
# 	}

# not used now but good concept.
#	getcddb () {
#			echo =================== >> ~/.cddb;
#			du -a	/mnt/cdrom	>>  ~/.cddb ;
#			echo ============================== >> ~/.cddb
#	}

# ad () { for i in ~/.dates/*.lst; do dates $@ $i ; done }

# defining setcursor
function setcursor {

    console_fonts=(/usr/share/consolefonts/t850b.psf.gz
                   /usr/share/consolefonts/Lat15-Terminus14.psf.gz)

    if [[ "$TERM" == "xterm" || "$TERM" == "screen" ]]
    then
        :
        # echo -ne "\033]12;ivory\007"
        # echo -ne "\033]12;cyan\007"
        # echo -ne "\033]12;LightCoral\007"
        # echo -ne "\033]12;Coral\007"
    elif [[ "$TERM" = "screen.linux" ]]
    then
        echo -n \\033\[\?17\;0\;60c ;		# for zshell
    elif [[ "$TERM" == "linux" ]]
    then
        if [ -r /usr/share/consolefonts/t850b.psf.gz ]
	      then
            if which consolechars > /dev/null 2>&1
            then
                consolechars -f $console_fonts[$findex]
            elif which -p setfont > /dev/null 2>&1
            then

                findex=1
                if whence -p shuf >/dev/null 2>&1
                then
                    findex=$(shuf -i1-$#console_fonts -n1)
                fi

                setfont $console_fonts[$findex]
                # setfont /usr/share/consolefonts/t850b.psf.gz -u xyz
                # setfont /usr/share/consolefonts/Lat15-Terminus14.psf.gz
            fi
        else
            :
        fi
    fi
}

# defining q
if [ -x /usr/games/fortune ]
then
    function qf () {
        if whence -p tput >/dev/null 2>&1
        then
	          tput clear;
	          tput cup 9 0;
	          /usr/games/fortune "$@";
	          tput cup 37 0
        else
            /usr/games/fortune "$@";
        fi
	      whence setcursor >/dev/null 2>&1 && setcursor

    }
elif which fortune > /dev/null 2>&1
then
    function qf () {
        if whence -p tput >/dev/null 2>&1
        then
	          tput clear
	          tput cup 9 0
	          fortune "$@"
	          tput cup 37 0
        else
            fortune "$@"
        fi
	      whence setcursor >/dev/null 2>&1 && setcursor
    }
else
    function qf () {
        if whence -p tput >/dev/null 2>&1
        then
	          tput clear;
        fi
	      whence setcursor >/dev/null 2>&1 && setcursor
    }
fi

function vacation () {
    if [ $# != 1 ] || [ $1 != "on" -a $1 != "off" ]
	  then
        echo "Error not doing any thing" >&2
        cat <<EOF
$0: usage
$0 on|off
EOF
    else
        mutt -s 'vacation '$1' qwe123' sharad.pratap@sasken.com
    fi
}

function suedit () {
    local pathx="$1"
    local filex=`basename $1`
    cp $pathx /tmp/$filex
    emacsclient -d $DISPLAY -n /tmp/$filex
    sudo cp /tmp/$filex $pathx
}

function wiki() { dig +short txt $1.wp.dg.cx; }

function mkcd() { mkdir -p "$@"; eval cd \$$# }

## XML functions

function mkxhtml() {
    curl "$1" | \
        tidy -i -asxml - 2>/dev/null | \
        xmllint - | \
        sed -e 's/&[nm]dash;//g' -e 's|xmlns="http://www.w3.org/1999/xhtml"||'
}

function pstreeo {
    pstree "$@" -p  $(command pgrep -o   '\<'$1'\>')
}

function adsearch () {
    objectClass=(person group)
    objectClassQ="(|(objectClass=person)(objectClass=group))"
    if [ "$1" -a "$1" = "all" ]
	  then
        query="(objectClass=*)"
        shift
    elif [ "$1" ]
	  then
        if [ "$1" = "person" -o "$1" = "group"  ]
	      then
            objectClass=$1
            objectClassQ="(objectClass=$1)"
            shift
        fi
    fi
    arg=$1
    # print $objectClassQ
    query="(&(|(cn=*"${arg}"*)(sn=*"${arg}"*)(givenName=*"${arg}"*)(physicalDeliveryOfficeName=*"${arg}"*)(telephoneNumber=*"${arg}"*))${objectClassQ})"
    # print $query
    shift

    attrs=("givenName" "cn" "mobile" "sn" "physicalDeliveryOfficeName" "homePhone" "mail" "ipPhone" "mailNickname" "department" "telephoneNumber" "title" "whenCreated")
    if [ "$1" -a "$1" = "all" ]
	  then
        ldapsearch    ${query} | egrep -v '^#|,DC=com'
    else
        ldapsearch    ${query} $attrs $@ | egrep -v '^#|,DC=com'
    fi
}

function adsearch-dbg () {
    objectClass=(person group)
    objectClassQ="(|(objectClass=person)(objectClass=group))"
    if [ "$1" -a "$1" = "all" ]
	  then
        query="(objectClass=*)"
        shift
    elif [ "$1" ]
	  then
        if [ "$1" = "person" -o "$1" = "group"  ]
	      then
            objectClass=$1
            objectClassQ="(objectClass=$1)"
            shift
        fi
    fi
    arg=$1
    # print $objectClassQ
    query="(&(|(cn=*"${arg}"*)(sn=*"${arg}"*)(givenName=*"${arg}"*)(physicalDeliveryOfficeName=*"${arg}"*)(telephoneNumber=*"${arg}"*))${objectClassQ})"
    # print $query
    shift

    attrs=("givenName" "cn" "mobile" "sn" "physicalDeliveryOfficeName" "homePhone" "mail" "ipPhone" "mailNickname" "department" "telephoneNumber" "title" "whenCreated")
    if [ "$1" -a "$1" = "all" ]
	  then
        echo ldapsearch    ${query} | egrep -v '^#|,DC=com'
        ldapsearch    ${query} | egrep -v '^#|,DC=com'
    else
        echo ldapsearch    ${query} $attrs $@ | egrep -v '^#|,DC=com'
        ldapsearch    ${query} $attrs $@ | egrep -v '^#|,DC=com'
    fi
}


DIRLEAVEHOOKFILE=.dirleavehook
DIRENTERHOOKFILE=.direnterhook
function _dir_leave_hook() {
    [ -r ${OLDPWD}/${DIRLEAVEHOOKFILE:-.dirleavehook} ] && source ${OLDPWD}/${DIRLEAVEHOOKFILE:-.dirleavehook}
}
function _dir_enter_hook() {
    [ -r ${PWD}/${DIRENTERHOOKFILE:-.direnterhook} ] && source ${PWD}/${DIRENTERHOOKFILE:-.direnterhook}
}
chpwd_functions=(${chpwd_functions[@]} "_dir_leave_hook")

chpwd_functions=(${chpwd_functions[@]} "_dir_enter_hook")

function scrmkcd () {

    scratchdir=$(mktemp -d -u -p  IIIIIII  --tmpdir=${TMP:-/tmp} --suffix=${1:-SCRATCH} XXXXXXXXXXXXXXXX)

    [[ -n "$rcdebug" ]] && echo $scratchdir >&2

    if mkdir -p ${scratchdir} && cd ${scratchdir}
    then
        cat <<-EOF > ${DIRLEAVEHOOKFILE:-.dirleavehook}
        if read -q resp"?Should I delete ${scratchdir}: [n] "
then
         sched -o +60:0 rm -rf ${scratchdir} && echo && echo will removed ${scratchdir} after 1 hour. >&2
        fi
EOF
    fi
}


## grml https://github.com/grml/grml-etc-core/blob/master/etc/zsh/zshrc
#f5# cd to directoy and list files
function cl () {
    emulate -L zsh
    cd $1 && ls -a
}

# smart cd function, allows switching to /etc when running 'cd /etc/fstab'
function cd () {
    if (( ${#argv} == 1 )) && [[ -f "${1}" ]]
    then
        [[ ! -e  "${1:h}"  ]] && return 1
        print "Correcting ${1} to ${1:h}"
        builtin cd ${1:h}
    else
        builtin cd "$@"
    fi
}

#f5# Create Directoy and \kbd{cd} to it
function mkcd () {
    if (( ARGC != 1 )); then
        printf 'usage: mkcd <new-directory>\n'
        return 1;
    fi
    if [[ ! -d "$1" ]]
    then
        command mkdir -p "$1"
    else
        printf '`%s'\'' already exists: cd-ing.\n' "$1"
    fi
    builtin cd "$1"
}

#f5# Create temporary directory and \kbd{cd} to it
function cdt () {
    builtin cd "$(mktemp -d)"
    builtin pwd
}

## grml https://github.com/grml/grml-etc-core/blob/master/etc/zsh/zshrc

function bkp-keys() {
    #from: http://codeblogging.net/blogs/1/16/creating-password-protected-targz-file-command-line
    local bkp_file=${1:-pick.log}
    local basedir=~/.repos/git/main/resource/userorg/main/readwrite/private/user/noenc/ecryptfsdir

    local cmds=("openssl enc -aes-256-cbc -pbkdf2 -e"
                "gpg --armor --symmetric --force-mdc -")

    local files=("secure/secure.d"
                 "enc/orgp")

    if [ ! -e "${bkp_file}" ]
    then
        select cmd in ${cmds[@]}
        do
            select file in ${files[@]}
            do
                echo tar czvf - --xform s@${basedir##/}/@secrets/@g "${basedir}/$file" \| ${=cmd} \> "${bkp_file}" >&2
                tar czvf - --xform s@${basedir##/}/@secrets/@g "${basedir}/${file}" | ${=cmd} > "${bkp_file}"
                break
            done
            break
        done
    else
        echo "${bkp_file}" already exists >&2
    fi
}

function restore-keys() {
    #from: http://codeblogging.net/blogs/1/16/creating-password-protected-targz-file-command-line
    local bkp_file=${1:-pick.log}
    local trgdir=${2:-.}

    local cmds=("openssl enc -aes-256-cbc -pbkdf2 -d  -in"
                "gpg --armor --decrypt")
    if [ -f "${bkp_file}" ]
    then
        if [ -d "${trgdir}" ]
        then
            if [ ! -e "${trgdir}/secrets" ]
            then
                select cmd in ${cmds[@]}
                do
                    echo ${=cmd} "${bkp_file}" \| tar -zxvf - -C "${trgdir}" >&2
                    ${=cmd} "${bkp_file}" | tar -zxvf - -C "${trgdir}"
                    break
                done
            else
                echo "${trgdir}/secrets" already exists >&2
            fi
        else
            echo no such "${trgdir}" directory exists >&2
        fi
    else
        echo no "${bkp_file}" provide >&2
    fi
}

function cryptdir() {
    #from: http://codeblogging.net/blogs/1/16/creating-password-protected-targz-file-command-line
    if (( ${+2} ))
    then
        tar czf - $2 | openssl enc -aes-256-cbc -e > $1
    else
        echo no file name
    fi
}


function decryptdir() {
    #from: http://codeblogging.net/blogs/1/16/creating-password-protected-targz-file-command-line
    if (( $# == 1 ))
    then
        openssl enc -in $1 -aes-256-cbc -d | tar -zxvf -
    else
        echo no file name
    fi
}


function screenssh {
    if (( $# >= 1 ))
    then
        local machine
        local prefixcmd
        local sessionarg
        local session
        local prefixcmdintractive
        if (( $# == 2 ))
        then
            machine=$1
            shift
            prefixcmd="ssh -X  -o VisualHostKey=no $machine"
            prefixcmdintractive="ssh -X  -o VisualHostKey=no -t $machine"
        fi
        sessionarg=$1
        session=${sessionarg:-default}


        if ssh-add -l > /dev/null  || ssh-add ~/.ssh/login-keys.d/*~*.pub
        then

            # if [ "$sessionarg" ] && ! ${=prefixcmd} screen -x ${session} -ls 2>/dev/null 1>&2 > /dev/null
            if [ "$sessionarg" ] && ${=prefixcmd} screen -x "${session}" -ls 2>/dev/null | grep 'No Sockets' > /dev/null  1>&2
            then
                trap 'print Interrupted >&2 ; return 1' SIGINT
                sessionorg=${session}
                # ${=prefixcmd} screen -x ${session} -ls 2>/dev/null | sed -n '/^There/,$p' | sed -n 2p | awk '{ print $1 }'
                session=$( ${=prefixcmd} screen -x ${session} -ls 2>/dev/null | sed -n '/^There/,$p' | sed -n 2p | awk '{ print $1 }' )
                local retval=$?
                if (( $retval == 255 ))
                then
                    print not able to run ${=prefixcmd} 'screen -x' ${session} '-ls'  \? $retval >&2
                    trap - SIGINT
                    return $retval
                    # else
                    #     session=$( ${=prefixcmd} screen -x ${session} -ls 2>/dev/null | sed -n '/^There/,$p' | sed -n 2p | awk '{ print $1 }' )
                fi
                trap - SIGINT
            fi

            # print sessionexists ${session} >&2

            if [ "${session}" ]
	          then
                print ${=prefixcmdintractive} screen -x ${session} >&2
                ${=prefixcmdintractive} screen -x "$session"
                if (( $? == 255 ))
                then
                    print some problem happened in ssh to $machine, will try after 7 seconds >&2
                    sleep 7s
                    screenssh $machine ${session}
                fi
            else
                print ${=prefixcmdintractive} screen -S "${sessionorg}" >&2
                ${=prefixcmdintractive} screen -S "${sessionorg}"
            fi
        else
            print Not able to set the private in ssh-agent. >&2
        fi


    else
        print no server name >&2
    fi
}

function lsscreenssh {
    if (( $# == 1 ))
    then
        machine=$1
        shift
        prefixcmdintractive="ssh -t  -o VisualHostKey=no $machine"
    fi

    if ssh-add -l > /dev/null  || ssh-add ~/.ssh/login-keys.d/*~*.pub
    then
        ${=prefixcmdintractive} screen -ls 2>/dev/null
    else
        print else
    fi
}


function scn() {
    # https://raymii.org/s/snippets/Sending_commands_or_input_to_a_screen_session.html
    # https://stackoverflow.com/questions/12255388/checking-if-a-screen-of-the-specified-name-exists
    local SESSION="$1"
    shift 1
    local _CLI="$@"
    local CLI="${(j:/:)_CLI}"
    local _CR=""

    if [ -z "$STY" ]
    then
        if ! screen -S "$SESSION" -Q select
        then
            screen -d -m -S "$SESSION"
        fi
        echo screen -d -x "$SESSION" -p 2 -X stuff "$CLI$_CR"
        screen -d -x "$SESSION" -p 2 -X stuff "$CLI$_CR"

        screen -d -m -x "$SESSION"
    fi
}

function scn-send() {
    # https://raymii.org/s/snippets/Sending_commands_or_input_to_a_screen_session.html
    # https://stackoverflow.com/questions/12255388/checking-if-a-screen-of-the-specified-name-exists
    local SESSION="$1"
    shift 1
    local _CLI="$@"
    local CLI="${(j:/:)_CLI}"
    local _CR=""

    if [ -z "$STY" ]
    then
        if ! screen -S "$SESSION" -Q select
        then
            screen -d -m -S "$SESSION"
        fi
        echo screen -d -x "$SESSION" -p 2 -X stuff "$CLI$_CR"
        screen -d -x "$SESSION" -p 2 -X stuff "$CLI$_CR"
    fi
}

# function zshexit {
# }

function _checkscheduls() {
    # command sleep 10s &
    print here check for schedule
}

zshexit_functions=(${chpwd_functions[@]} "_checkscheduls")




function mkrsetupdir () {
    if (( $# == 1 ))
    then
        dir=$1
        mkdir -p ~/.rsetup/$dir/{env,run}.d
        cat > ~/.rsetup/$dir/run <<EOF
#!/usr/bin/env zsh
[ -r ~/.rsetup/$dir/run.d/\${HOST} ] && ~/.rsetup/$dir/run.d/\${HOST}
EOF

        cat > ~/.rsetup/$dir/env <<EOF
[ -r ~/.rsetup/$dir/env.d/\${HOST} ] && . ~/.rsetup/$dir/env.d/\${HOST}
EOF
    else
        echo onl one arg required >&2
    fi
}


#{{ Debug.
function standoutmsg () {
    if (( ${+STANDOUTMSGFILE} ))
    then
        print "\n\n\n" sharad: $@ "\n\n\n" >> $STANDOUTMSGFILE
    else
        print STANDOUTMSGFILE is not set to file
    fi
}

STANDOUTMSG_standoutmsgfns=()

function mkstandoutmsg () {
    # print QQQ $@

    local _fundefined _xlmachine _xlfile _xluser singleq doubleq

    set -- $(getopt -n mkstandoutmsg -o n:f:u: -- $@)
    while [ $# -gt 0 ]
    do
        case $1 in
            (-n) eval _xlmachine=$2; shift;;
            (-f) eval _xlfile=$2; shift;;
            (-u) eval _xluser=$2; shift;;
            (--) ;;
            (-*) echo "$0: error - unrecognized option $1" 1>&2; : help; return -1;;
            (*)  break;;
        esac
        shift
    done

    if ! (( ${+_xlfile} ))
    then
        echo bye >&2
        return -1
    fi

    if ! (( ${+_xluser} ))
    then
        echo bye >&2
        return -1
    fi

    singleq="'"
    doubleq='"'

    if [ "${_xlmachine}" ] 
    then
        _fundefined="standoutmsg-${_xlmachine}-$(basename $_xlfile)"
        eval "function ${_fundefined}" \
             '() { ' \
             'if [ "$STANDOUTMSGnonl" = "yes" ]
	then ;' \
             "   nls=$singleq$singleq    ;" \
             'else ;' \
             "   nls=$singleq\\\n\\\n\\\n$singleq    ;" \
             'fi ;' \
             'ssh ' \
             "${_xlmachine}" \
             $doubleq \
             "  echo -e \$nls" \
             '$(date +%d%h%Y-%H:%M:%S)' \
             "${_xluser}:" \
             "${singleq}" \
             '"$@" ' \
             "${singleq}" \
             "\$nls" \
             ' >>  ' \
             ${_xlfile} \
             $doubleq \
             '}'
    else
        _fundefined="standoutmsg-$(basename $_xlfile)"
        eval "function ${_fundefined}" \
             '() { ' \
             'if [ "$STANDOUTMSGnonl" = "yes" ]
	then ;' \
             "   nls=$singleq$singleq    ;" \
             'else ;' \
             "   nls=$singleq\\n\\n\\n$singleq    ;" \
             'fi ;' \
             'print $nls' \
             '$(date +%d%h%Y-%H:%M:%S)' \
             "${_xluser}:" \
             '"$@" $nls >>  ' \
             ${_xlfile} \
             '}'
    fi


    print defined ${_fundefined} as

    functions ${_fundefined}

    STANDOUTMSG_standoutmsgfns+=${_fundefined}
}

function STANDOUTMSG_standoutmsgAll () {
    foreach fn (${(u)STANDOUTMSG_standoutmsgfns})
do
    $fn "$@"
done

    print "$@"
}

function waitmsg () {
    print Wait $1
    sleep $1
}

## hashing ##
function getmd5hash () {
    if (( $# == 1 ))
    then
        local hash
        hash=$(md5sum $1 | cut -f1 -d' ')
        print ${hash[1,4]}${hash[-4,-1]}
    fi
}

function mvhash () {
    if (( $# == 1 ))
    then
        local hname=$1-$(getmd5hash $1)
        mv $1 $hname
        print mv $1 $hname
    fi
}

function running()
{
    echo running "$@"
    local _cmd=$1
    shift
    if [ ! $noaction ]
    then
        $_cmd "$@"
    fi
}


#}}

#{{ ## hashing ##

## images
if whence -c w3m >& /dev/null && [ -x /usr/lib/w3m/w3mimgdisplay ]
then

    function w3mimg() {
        if [ $# -gt 0 ]
	      then
            w3m  ${=2:+ -o image_scale=$2} -o imgdisplay=/usr/lib/w3m/w3mimgdisplay -o confirm_qq=N $1
        else
            print No image file >&2
            print w3mimg img '[ scale ]' >&2
        fi
    }

    alias -s jpeg=w3mimg
    alias -s jpg=w3mimg
fi
## images

## http://stackoverflow.com/questions/5143795/how-can-i-check-in-a-bash-script-if-my-local-git-repo-has-changes
function gitspull () {

    if [ $# -eq 0 ]
    then
        superepos=(~/.repos/git /usr/local/.repos/git)
    else
        superepos="$@"
    fi

    foreach superepo ( $superepos )
    {


        if ssh-add -l >& /dev/null
        then
            print fetching changes
            : git -C ${superepo} submodule foreach git remote update
        fi

        foreach gdir ( $(git -C ${superepo} submodule | cut -c2- | cut -f2 -d' ') "" )
        {
            print ${superepo}/$gdir
            if ssh-add -l >& /dev/null
            then
                git -C ${superepo}/$gdir remote update
            fi
            local remotebranch
            if [ -r ${superepo}/$gdir/.git/refs/remotes/origin/HEAD ]
            then
                remotebranch=remotes/origin/HEAD
            elif [ -r ${superepo}/$gdir/.git/refs/remotes/origin/master ]
            then
                remotebranch=remotes/origin/master
            fi

            echo git -C ${superepo}/$gdir diff -s ${gdir:+--ignore-submodules=all} --exit-code

            if [ -d ${superepo}/$gdir ] &&
                   ! ( git -C ${superepo}/$gdir diff -s ${gdir:+--ignore-submodules=all} --exit-code &&
                           git -C ${superepo}/$gdir diff -s ${gdir:+--ignore-submodules=all} --exit-code $remotebranch )
            then
                print start $gdir
                git -C ${superepo}/$gdir status
                git -C ${superepo}/$gdir fetch --all
                git -C ${superepo}/$gdir merge --ff-only
                git -C ${superepo}/$gdir status

                # if [ -z "$gdir" ]
                # then
                #     git -C ${superepo}/$gdir commit -a -m "Updating the submodules to the latest version"
                #     echo git -C ${superepo}/$gdir commit -a -m "Updating the submodules to the latest version"
                # else
                #     git -C ${superepo}/$gdir commit -a -m "corrections"
                #     echo git -C ${superepo}/$gdir commit -a -m "corrections"
                # fi
                # git -C ${superepo}/$gdir push origin
                # git -C ${superepo}/$gdir status
                print end ${superepo}/$gdir
            else
                print no change in ${superepo}/$gdir
            fi
            unset remotebranch
        }
    }

}

function gitssync () {

    if [ $# -eq 0 ]
    then
        superepos=(
            ~/.Private/secure.d
            ~/.repos/git/main/resource/userorg/
            ~/.repos/git/main/resource/info/doc/orgs/private/doc
            ~/.repos/git/main/resource/data/multimedia/orgs/private/media/
            ~/.localrepo/git/
        )
    else
        superepos="$@"
    fi

    foreach superepo ( $superepos )
    {

        if ssh-add -l >& /dev/null
        then
            print fetching changes
            git -C ${superepo} submodule foreach git remote update
        fi

        foreach gdir ( $(git -C ${superepo} submodule | cut -c2- | cut -f2 -d' ') "" )
        {
            print ${superepo}/$gdir
            if ssh-add -l >& /dev/null
            then
                : git -C ${superepo}/$gdir remote update
            fi
            local remotebranch
            if [ -r ${superepo}/$gdir/.git/refs/remotes/origin/HEAD ]
            then
                remotebranch=remotes/origin/HEAD
            elif [ -r ${superepo}/$gdir/.git/refs/remotes/origin/master ]
            then
                remotebranch=remotes/origin/master
            fi

            echo git -C ${superepo}/$gdir diff -s ${gdir:+--ignore-submodules=all} --exit-code

            if [ -d ${superepo}/$gdir ] &&
                   ! ( git -C ${superepo}/$gdir diff -s ${gdir:+--ignore-submodules=all} --exit-code &&
                           git -C ${superepo}/$gdir diff -s ${gdir:+--ignore-submodules=all} --exit-code $remotebranch )
            then
                print start $gdir
                git -C ${superepo}/$gdir status
                git -C ${superepo}/$gdir fetch -all
                git -C ${superepo}/$gdir merge --ff-only
                git -C ${superepo}/$gdir status

                if [ -z "$gdir" ]
                then
                    git -C ${superepo}/$gdir commit -a -m "Updating the submodules to the latest version"
                    echo git -C ${superepo}/$gdir commit -a -m "Updating the submodules to the latest version"
                else
                    git -C ${superepo}/$gdir commit -a -m "corrections"
                    echo git -C ${superepo}/$gdir commit -a -m "corrections"
                fi
                git -C ${superepo}/$gdir push origin
                git -C ${superepo}/$gdir status
                print end ${superepo}/$gdir
            else
                print no change in ${superepo}/$gdir
            fi
            unset remotebranch
        }
    }

}

function gitsstatus () {

    if [ $# -eq 0 ]
    then
        # ~/.repos/git /usr/local/.repos/git
        superepos=(
            ~/.Private/secure.d
            ~/.repos/git/main/resource/userorg/
            ~/.repos/git/main/resource/info/doc/orgs/private/doc
            ~/.repos/git/main/resource/data/multimedia/orgs/private/media/
            ~/.localrepo/git/
        )
    else
        superepos="$@"
    fi

    foreach superepo ( $superepos )
    {

        if ssh-add -l >& /dev/null
        then
            git -C $superepo submodule foreach git remote update
        fi

        git -C $superepo status

        git -C $superepo submodule foreach git status
    }
}

#}}

#{{ ssh
function sshaddkey() {
    KEYCHAINDIR=$HOME/.keychain-screen

    if [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ] && # ssh-agent pid is not set
           ps ${SSH_AGENT_PID} 2>&1 > /dev/null                        # if pid is set and working alive ssh-agent process.
    then

        if ! ssh-add -l 2>&1 > /dev/null
        then
            if [ -t ]
	          then
                ssh-add ~/.ssh/login-keys.d/*~*.pub
            else
                ssh-add ~/.ssh/login-keys.d/*~*.pub < /dev/null
            fi
        fi

    else

        if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
        then
            . ${KEYCHAINDIR}/${HOST}-sh

            if  [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ] && # ssh-agent pid is set
                    ps ${SSH_AGENT_PID} 2>&1 > /dev/null                            # if pid is set and working alive ssh-agent process.
            then
                if ! ssh-add -l 2>&1 > /dev/null                                # key is not added
                then
                    if [ -t ]
                    then
                        ssh-add ~/.ssh/login-keys.d/*~*.pub
                    else
                        ssh-add ~/.ssh/login-keys.d/*~*.pub < /dev/null
                    fi
                fi
            else
                unset SSH_AGENT_PID
                unset SSH_AUTH_SOCK
                rm -f ${KEYCHAINDIR}/${HOST}-sh
            fi          # if  [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ]
        fi              # if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
    fi  # if [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ] && # ssh-agent pid is not set
}
#}}

##{{ kernel
function kernel-pkgs() {
    local version=$1
    echo linux-headers-${version} linux-headers-${version}-generic linux-image-${version}-generic linux-image-extra-${version}-generic linux-signed-image-${version}-generic
}
##}}

##{{ Display

function runmidscreen() {
    clear
    tput cup $(( $(tput lines) / 2 )) $(( $(tput cols) / 2 ))
    $@
    tput cup $(( $(tput lines) ))
}
##}}


##{{ Utils
removelink() {
    if [ -L "$1" ] && whence -p readlink >& /dev/null
    then
        cp --remove-destination "$(readlink "$1")" "$1"
    fi
}
##}}

##{{
function sshnopass() {
    target=$1
    if ! ssh -o PasswordAuthentication=no $target
    then
        echo you key not present in $target, supply it >&2
        if ssh-copy-id -i ${LOCAL_SSH_PRIMARY_KEY:-~/.ssh/login-keys.d/work} $target
        then
            ssh -o PasswordAuthentication=no $target
        fi
    fi
}

##}}


##{{ genpass
function genpasswd() {
    local len=$1
    [ "$len" = "" ] && len=16
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${len} | xargs
}
##}}

##{{ bk
function bk() {
    cp -arv $1{,-bk$(date +%Y%h%d_%H%M%S)}
}
##}}


##{{ emacs
# from: https://jpace.wordpress.com/2016/12/01/current-file-and-directory-in-emacs-and-z-shell/
function cde () {
    cd ${(Q)~$(emacsclient -f ~/.emacs.d/server/$EMACS_SERVER_NAME \
                           -e '(with-current-buffer
                                 (window-buffer (selected-window))
                                   default-directory) ' | sed -e '1!b' -e '/emacsclient: connected to remote socket at/d')}
}
ecf() {
    echo ${(Q)~$(emacsclient -f ~/.emacs.d/server/$EMACS_SERVER_NAME \
                             -e '(with-current-buffer
                                   (window-buffer (selected-window))
                                     buffer-file-name) ' | sed '1{/"emacsclient: connected to remote socket at"/!d}')}
}
ecd() {
    echo ${(Q)~$(emacsclient -f ~/.emacs.d/server/$EMACS_SERVER_NAME \
                             -e '(with-current-buffer
                       (window-buffer (selected-window))
                         default-directory) ' | sed -e '1!b' -e '/emacsclient: connected to remote socket at/d')}
}
function cde () { cd `ecd` }
##}}

##{{ symlink
function symlink-final ()
{
    if [ "$1" ]
    then
        symlink="$1"
        if [ -L "$symlink" ]
        then
            readsymlink="$(readlink -m $symlink)"
            rm -f $symlink
            ln -s "$readsymlink" $symlink
        fi
    fi
}

##}}

##{{
function add2setup ()
{
    if [ $# -eq 1 ]
    then
        addfile=$(basename $1)
        if [ "$addfile[1]" = "." ]
        then
            addfile=$addfile[2,${#addfile}]
        fi
        if [  -e ~/.$addfile -a ! -L ~/.$addfile -a ! -e ~/.setup/$addfile ]
        then
            mv ~/.$addfile ~/.setup/$addfile
            ln -s .setup/$addfile ~/.$addfile
            rm -f ~/.setup/.config/_home/.$addfile
            cp -a ~/.$addfile ~/.setup/.config/_home
            git -C ~/.setup/ add $addfile .config/_home/.$addfile
        else
            echo No ~/.$addfile such file exists. >&2
        fi
    else
        echo only one file required. >&2
    fi
}

function rmfrmsetup ()
{
    if [ $# -eq 1 ]
    then
        addfile=$(basename $1)
        if [ "$addfile[1]" = "." ]
        then
            addfile=$addfile[2,${#addfile}]
        fi
        if [ -L ~/.$addfile -a -e ~/.setup/$addfile ]
        then
            rm -f ~/.$addfile ~/.setup/_home/.$addfile
            mv ~/.setup/$addfile ~/.$addfile
            git -C ~/.setup/ rm --cached $addfile _home/.$addfile
        else
            echo No ~/.$addfile such file exists. >&2
        fi
    else
        echo only one file required. >&2
    fi
}

##}}


##{{
# https://serverfault.com/questions/115856/how-to-list-symbolic-link-chains
function chain()
{
    export chain
    local link target
    if [[ -z "$chain" ]]
    then
        chain="$1"
    fi
    link=$(command stat --printf=%N "$1")
    while [[ "$link" =~ "->" ]]
    do
        target="${link##*\`}"
        target="${target%\'}"
        chain+=" -> $target"
        if [[ ! "$target" =~ "/" && "$1" =~ "/" ]]
        then
            target="${1%/*}/$target"
        fi
        chain "$target"
        return
    done
    echo "$chain"
    unset chain
}


function chain ()
{
    export chain;
    local target;
    if [[ -z "$chain" ]]
    then
        chain="$1";
    fi;
    target=$(readlink "$1");
    while [[ "$target" ]]
    do
        chain+=" -> $target";
        if [[ ! "$target" =~ "/" && "$1" =~ "/" ]]
        then
            target="${1%/*}/$target"
        fi
        chain "$target";
        return;
    done;
    echo "$chain";
    unset chain
}

##}}

##{ GUI

function runwmaker ()
{
    startx =wmaker -- =Xephyr :3  -ac -screen 1280x1024 -br -no-host-grab -reset -terminate 2> /dev/null
}

##}


##{ Language

#   133972  ls /run/current-system/locale/
#   133973  ls /run/current-system/locale/2.29/
#   134153  less /etc/default/locale
#   134160  locale -a
# > 134161  sudo locale-gen ar_DZ
#   134162  sudo locale-gen ar_DZ.UTF-8
#   134163  sudo update-locale
#   134169  locale -a
#   134171  locale -a
#   134212  locale -a

function locale_hindi ()
{
    LANG=hi_IN.UTF-8
    LANGUAGE=hi_IN.UTF-8
    export LANG
    export LANGUAGE
}

function locale_urdu ()
{
    LANG=ur_PK.UTF-8
    LANGUAGE=ur_PK.UTF-8
    export LANG
    export LANGUAGE
}

function locale_language ()
{
    LANG=$1_$2.UTF-8
    LANGUAGE=$LANuG
    export LANG
    export LANGUAGE
}

##}


##{{ wctrl xproto
# https://superuser.com/questions/142945/bash-command-to-focus-a-specific-window
# https://www.google.com/search?q=term%20focus%20window
# https://stackoverflow.com/questions/2250757/is-there-a-linux-command-to-determine-the-window-ids-associated-with-a-given-pro
# https://stackoverflow.com/questions/20580897/get-x-window-id-from-process-in-bash?lq=1

function focus-ctrl-term()
{
    local _status=$?
    ## Focus controling terminal of shell
    if [ "$PPID" ]
    then
        PWIN="$(xdotool search --pid $PPID)"
        if [ "$PWIN" ]
        then
            wmctrl -i -a "$PWIN"
        else
            echo Can not get window associated with parent pid $PPID >&2
        fi
    else
        echo can not get shell parent PID >&2
    fi
    return $_status
}
##}}

##{{
function quickfind() {
    # find  $(readlink -m $1)   -mindepth 1 -printf '%P\n' | rofi -threads 0 -width 100 -dmenu -i -p "locate:" | xargs -r -0 printf -- $(readlink -m $1)'/%s\n' | xargs -r -o xedn
    find  $(readlink -m $1) -mindepth 1 -printf '%P\n' \
          -type d \( -path \*/SCCS -o -path \*/RCS -o -path \*/CVS -o -path \*/MCVS -o -path \*/.src -o -path \*/.svn -o -path \*/.git -o -path \*/.hg -o -path \*/.bzr -o -path \*/_MTN -o -path \*/_darcs -o -path \*/\{arch\} \) -prune -o \! -type d \( -name .\#\* -o -name \*.cmti -o -name \*.cmt -o -name \*.annot -o -name \*.cmi -o -name \*.cmxa -o -name \*.cma -o -name \*.cmx -o -name \*.cmo -o -name \*.pho -o -name \*.phi -o -name \*.glob -o -name \*.vo -o -name \*.beam -o -name \*.vee -o -name \*.jam -o -name \*.hi -o -name \*.o -o -name \*\~ -o -name \*.bin -o -name \*.lbin -o -name \*.so -o -name \*.a -o -name \*.ln -o -name \*.blg -o -name \*.bbl -o -name \*.elc -o -name \*.lof -o -name \*.glo -o -name \*.idx -o -name \*.lot -o -name \*.fmt -o -name \*.tfm -o -name \*.class -o -name \*.fas -o -name \*.lib -o -name \*.mem -o -name \*.x86f -o -name \*.sparcf -o -name \*.dfsl -o -name \*.pfsl -o -name \*.d64fsl -o -name \*.p64fsl -o -name \*.lx64fsl -o -name \*.lx32fsl -o -name \*.dx64fsl -o -name \*.dx32fsl -o -name \*.fx64fsl -o -name \*.fx32fsl -o -name \*.sx64fsl -o -name \*.sx32fsl -o -name \*.wx64fsl -o -name \*.wx32fsl -o -name \*.fasl -o -name \*.ufsl -o -name \*.fsl -o -name \*.dxl -o -name \*.lo -o -name \*.la -o -name \*.gmo -o -name \*.mo -o -name \*.toc -o -name \*.aux -o -name \*.cp -o -name \*.fn -o -name \*.ky -o -name \*.pg -o -name \*.tp -o -name \*.vr -o -name \*.cps -o -name \*.fns -o -name \*.kys -o -name \*.pgs -o -name \*.tps -o -name \*.vrs -o -name \*.pyc -o -name \*.pyo \) -prune -o  -type f \( -name \*.el \) \
        | rofi -threads 0 -width 100 -dmenu -i -p "locate:" | xargs -r -0 printf -- $(readlink -m $1)'/%s\n' | xargs -r -o xdg-open
}
##}}



##{{
function infinite()
{
    local _time="$1"
    shift
    local cmd="$1"
    shift
    while true
    do
        $cmd "$@"
        echo sleep ${_time}
        sleep ${_time}
    done
}
##}}
